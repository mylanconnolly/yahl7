# frozen_string_literal: true

module YAHL7
  module V2
    # This class defines the parse options used for an HL7 message. This should
    # be generated by the HL7 message itself, but it is possible to define one
    # manually, as well.
    class ParseOptions
      attr_accessor :segment_sep, :repetition_sep, :field_sep, :component_sep, :sub_component_sep, :escape

      # rubocop:disable Metrics/ParameterLists
      def initialize(
        segment_sep: YAHL7::V2::SEGMENT_SEP,
        repetition_sep: YAHL7::V2::REPETITION_SEP,
        field_sep: YAHL7::V2::FIELD_SEP,
        component_sep: YAHL7::V2::COMPONENT_SEP,
        sub_component_sep: YAHL7::V2::SUB_COMPONENT_SEP,
        escape: YAHL7::V2::ESCAPE
      )
        @segment_sep = segment_sep
        @repetition_sep = repetition_sep
        @field_sep = field_sep
        @component_sep = component_sep
        @sub_component_sep = sub_component_sep
        @escape = escape
      end
      # rubocop:enable Metrics/ParameterLists

      def field_regexp
        /#{Regexp.escape(field_sep)}|#{Regexp.escape(component_sep)}|#{Regexp.escape(sub_component_sep)}/
      end

      # HL7 messages embed their own parse options in the message (with the
      # exception of the segment separator, which _should_ always be a return,
      # but some systems do not always use this).
      def self.from_body(body, segment_sep = "\r")
        new(
          segment_sep: segment_sep,
          repetition_sep: body[3],
          component_sep: body[4],
          field_sep: body[5],
          escape: body[6],
          sub_component_sep: body[7]
        )
      end
    end
  end
end
